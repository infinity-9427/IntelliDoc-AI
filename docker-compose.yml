version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: intellidoc-postgres
    environment:
      POSTGRES_DB: intellidoc_db
      POSTGRES_USER: intellidoc_user
      POSTGRES_PASSWORD: intellidoc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intellidoc_user -d intellidoc_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: intellidoc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: intellidoc-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: intellidoc-minio
    environment:
      MINIO_ACCESS_KEY: intellidoc
      MINIO_SECRET_KEY: intellidoc123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: intellidoc-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://intellidoc_user:intellidoc_password@postgres:5432/intellidoc_db
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=intellidoc
      - MINIO_SECRET_KEY=intellidoc123
      - UPLOAD_DIR=/app/storage/uploads
      - PROCESSED_DIR=/app/storage/processed
      - TEMP_DIR=/app/storage/temp
      - MODELS_DIR=/app/storage/models
      - VECTORS_DIR=/app/storage/vectors
      - ML_MODELS_CACHE=/app/ml-models
    volumes:
      - ./backend:/app
      - ./backend/storage:/app/storage
      - ./ml-models:/app/ml-models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: intellidoc-celery
    environment:
      - DATABASE_URL=postgresql://intellidoc_user:intellidoc_password@postgres:5432/intellidoc_db
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=intellidoc
      - MINIO_SECRET_KEY=intellidoc123
      - UPLOAD_DIR=/app/storage/uploads
      - PROCESSED_DIR=/app/storage/processed
      - TEMP_DIR=/app/storage/temp
      - MODELS_DIR=/app/storage/models
      - VECTORS_DIR=/app/storage/vectors
      - ML_MODELS_CACHE=/app/ml-models
    volumes:
      - ./backend:/app
      - ./backend/storage:/app/storage
      - ./ml-models:/app/ml-models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4

  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: intellidoc-scheduler
    environment:
      - DATABASE_URL=postgresql://intellidoc_user:intellidoc_password@postgres:5432/intellidoc_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app beat --loglevel=info

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: intellidoc-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev

  prometheus:
    image: prom/prometheus:latest
    container_name: intellidoc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: intellidoc-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:
